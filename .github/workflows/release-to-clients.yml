name: 'Release Last Uploaded Binary of Google Artifact Registry to Clients'

on: 
  workflow_dispatch:  # Manually triggered for flexibility

jobs:
  push-target-file:
    name: 'Push Target File to TUF Repository'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:

      # Step 1: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with: 
          token_format: access_token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

      # Step 2: Reading the version of the last uploaded release to Google Artifact Registry
      - name: Reading the last uploaded release to Google Artifact Registry
        run: |
          service_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          echo "SERVICE_NAME=$service_name">>$GITHUB_ENV
          echo "Getting the last released version to Google Artifact Registry"
          VERSION=$(gcloud artifacts versions list \
            --location=europe-southwest1 \
            --project=polished-medium-445107-i9 \
            --repository=nebula-storage \
            --package=$service_name \
            --sort-by=~createTime \
            --limit=1 \
            --format="value(VERSION)")
          echo "Latest version is $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # From the version, the SHA256 can be obtained
          sha256=$(echo "${VERSION}" | cut -d '-' -f2)

          echo "The sha256 is $sha256"

          echo "SHA256=$sha256">>$GITHUB_ENV
      
      # Step 3: Reading the files that are inside the latest uploaded version
      - name: Reading the files that are inside this uploaded last version
        run: |
          echo "Listing files in version $VERSION"
          FILES=$(gcloud artifacts files list \
            --location=europe-southwest1 \
            --project=polished-medium-445107-i9 \
            --repository=nebula-storage \
            --package=$SERVICE_NAME  \
            --version=$VERSION \
            --format="value(name)")
          echo "Files in the version:"
          echo "$FILES"
          echo "FILES=$FILES" >> $GITHUB_ENV

      # Step 4: Computing the size of the listed files
      - name: Compute File Sizes in Latest Version
        id: compute_sizes
        run: |
          echo "Listing files and their sizes in version $VERSION"
          FILE_SIZES=$(gcloud artifacts files list \
            --location=europe-southwest1 \
            --project=polished-medium-445107-i9 \
            --repository=nebula-storage \
            --package=$SERVICE_NAME \
            --version=$VERSION \
            --format="csv[no-heading](name,sizeBytes)")
          
          echo "Files and sizes:"
          echo "$FILE_SIZES"

          # Compute total size
          TOTAL_SIZE=$(echo "$FILE_SIZES" | awk -F',' '{sum += $2} END {print sum}')
          echo "Total size of files: $TOTAL_SIZE bytes"
          echo "TOTAL_SIZE=$TOTAL_SIZE" >> $GITHUB_ENV

      # Step 4: Clone the Target Repository
      - name: Clone Target Repository
        env:
          TUF_REPO_URL: ${{ secrets.TUF_REPO_URL }}
        run: |
          echo "Cloning the TUF repository..."
          git clone "$TUF_REPO_URL" tuf-repo
          cd tuf-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"


      # Step 5: Generate or Update index.json
      - name: Generate the new service's index.json
        run: |

          # Extracting the length and the sha256
          length=$TOTAL_SIZE
          sha256=$SHA256

          echo "Artifact Length: $length"
          echo "Artifact SHA256: $sha256"

          # Contructing the index name
          index_name=$(echo "${SERVICE_NAME}-index.json")
      
          # Overwrite or create a new index.json file with an empty JSON object
          echo "Resetting $index_name to an empty JSON object..."
          echo '{}' > "$index_name"

          # Access the version output from the previous step
          version=$VERSION

          # Path in which the .zip is stored in the Google Artifact Registry
          path="https://artifactregistry.googleapis.com/download/v1/projects/polished-medium-445107-i9/locations/europe-southwest1/repositories/nebula-storage/files/${SERVICE_NAME}:${version}:${SERVICE_NAME}.zip:download?alt=media"

          echo "File: $filename, Length: $length, SHA256: $sha256, Version: $version"

          # Update the JSON index file
          jq --arg file "$basename" \
            --arg length "$length" \
            --arg sha256 "$sha256" \
            --arg version "$version" \
            --arg path "$path" \
            '.[$file] = {length: ($length | tonumber), path: $path, hashes: {sha256: $sha256}, version: $version}' "$index_name" > tmp.json && mv tmp.json "$index_name"

          echo "Updated $index_name"
          cat "$index_name"

      # Step 6: Compute SHA256 hash of the file in the updates-not-released folder
      - name: Get the Branch Name
        id: compute-branch
        run: |
          date=$(date +'%Y.%m.%d-%H.%M.%S')
          branch_name="sign/Updates-${date}"
          echo "Branch name: $branch_name"

          # Export the branch name for later steps
          echo "::set-output name=branch::$branch_name"
        shell: bash

      # Step 7: Create and Checkout the Computed Branch
      - name: Create and Checkout New Branch
        run: |
          cd tuf-repo
          branch_name=${{ steps.compute-branch.outputs.branch }}
          git checkout -b $branch_name
          echo "Created and switched to branch $branch_name."

      # Step 8: Move index.json to the Targets Folder
      - name: Move  index file to its corresponding repository
        run: |
          cd tuf-repo
          # Get the name
          repo_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          filename="${repo_name}-index.json"
          echo "File name: $filename"

          # Remove the '-index.json' suffix to get 'something'
          name=$(echo "$filename" | sed 's/-index\.json$//')

          echo "Moving $filename from updates-not-released-index to targets/$name..."
          
          # Create the target directory if it doesn't exist
          mkdir -p "targets/$name"
          
          # Move the file to the new directory
          mv "updates-not-released-index/$filename" "targets/$name"

          echo "Moved $filename to targets/$name folder."

      # Step 9: Commit and Push Changes
      - name: Commit and Push Changes
        env:
            TUF_REPO_PAT: ${{ secrets.TUF_REPO_PAT }}
        run: |
            cd tuf-repo
            git add targets/
            git commit -m "Move index.json from updates-not-released-index to targets/"
            git push https://x-access-token:${TUF_REPO_PAT}@github.com/sorayaormazabalmayo/TUF_Repository_Yubikey_Vault.git ${{ steps.compute-branch.outputs.branch }}

