name: 'Build, Test, and Release'

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-test-go-files:
    name: 'Build and Test Go Files'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      TZ: Europe/Madrid  # Set the timezone to your local timezone

    steps:
      # Step 1: Clone the source repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Setting up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: Build all Go files
      - name: Build All Go Files
        id: build_step
        run: |
          echo "Building all Go files in the directory..."
          mkdir -p build
          find . -type f -name "*.go" | while read -r file; do
            echo "Building $file..."
            output_name=$(basename "$file" .go)
            go build -o "build/$output_name" "$file"
          done

      # Step 4: Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/

      # Step 5: Show Build Results
      - name: List Build Output
        run: |
        echo "Build outputs:"
        ls -lh build/

      # Step 5: Simulating that some testings are done
      - name: Simulating that some testings are done
        run: |
          echo "Simulating that some testings are done"
    
      # Step 6: Checkout the repository
      - name: Checkout the Repository
        uses: actions/checkout@v3

      # Step 7: Compress Build Artifacts
      - name: Compress Build Artifacts
        run: |
          zip -r build_artifacts.zip build/

      # Step 8: Create a release
      - name: Create a GitHub Release
        uses: actions/create-release@v1
        with:
          token: ${{ github.token }}  # Use the default GitHub token
          tag_name: ${{ github.event.inputs.tag }}
          release_name: "Release ${{ github.event.inputs.tag }}"
          body: |
            Release generated by GitHub Actions.
            Includes build artifacts.
          draft: false
          prerelease: false

      # Step 9: Upload the build artifacts to the release
      - name: Upload the build artifacts to the release
        uses: actions/upload-release-asset@v1
        with: 
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: build_artifacts.zip
          asset_name: build_artifacts.zip
          asset_content_type: application/zip
