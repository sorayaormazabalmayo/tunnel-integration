name: 'Build, Test, and Release Updates to Google Artifact Registry'

on:
  workflow_dispatch:
  push: 
    tags: 
      - '*' # Workflow is trigered when a push is made with a tag

jobs:
  # Job 1: Check that the release version is correct
  well-tag-triggered-job:
    name: 'Check tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      TZ: Europe/Madrid  # Set the timezone to your local timezone
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Step 1: Clone the source repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Display tag information
      - name: Get Tag Details
        run: |
          echo "Tag Name: ${{ github.ref_name }}"
          echo "Full Reference: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"

          ## Changing the variable name for the tag
          echo "tag=${{github.ref_name}}">>$GITHUB_ENV
          echo "The Tag name is ${{env.tag}}"

      # Step 3: Validate the Tag Format (Date and Commit SHA)
      - name: Validate the Tag Format (Date and Commit SHA)
        run: |
          # Extracting the current date in YYYY.MM.DD format
          current_date=$(date -u +"%Y.%m.%d")  # ✅ Fixed date format
          echo "Current Date: $current_date"

          # Extract commit hash of HEAD
          commit_hash=$(git rev-parse --short HEAD)
          echo "Current Commit Hash: $commit_hash"

          # Extract date and commit from the tag
          tag="${{ env.tag }}"  # ✅ Ensure env variable reference is correct
          echo "Validating Tag: $tag"

          # ✅ Regex to check tag format: vYYYY.MM.DD+shaabcdefg
          if [[ "$tag" =~ ^v([0-9]{4}\.[0-9]{2}\.[0-9]{2})\+sha([a-f0-9]+)$ ]]; then
            tag_date="${BASH_REMATCH[1]}"
            tag_commit="${BASH_REMATCH[2]}"

            echo "Extracted Tag Date: $tag_date"
            echo "Extracted Tag Commit Hash: $tag_commit"

            # Compare extracted date with current :
            if [[ "$tag_date" != "$current_date" ]]; then
              echo "❌ ERROR: Tag date ($tag_date) does not match today's date ($current_date)!"
              exit 1
            fi

            # Compare extracted commit hash with actual commit hash
            if [[ "$tag_commit" != "$commit_hash" ]]; then
              echo "❌ ERROR: Tag commit hash ($tag_commit) does not match the current commit ($commit_hash)!"
              exit 1
            fi

            echo "✅ Tag validation successful!"
          else
            echo "❌ ERROR: Tag format is incorrect! Expected format: vYYYY.MM.DD+shaabcdefg"
            exit 1
          fi

  # Job 2: Job for uploading a release to GitHub and an artifact to GAR
  uploading-release-to-GitHub-and_GAR:
    name: 'Making release to GitHub and GAR'
    runs-on: ubuntu-latest
    needs: well-tag-triggered-job
    permissions:
      contents: write
      id-token: write
    env:
      TZ: Europe/Madrid  # Set the timezone to your local timezone
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps: 

      # Step 1: Clone the source repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Setting up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: List all Go files in the directory
      - name: List All Go Files
        run: |
          echo "Listing all Go files in the directory:"
          find . -type f -name "*.go"

      # Step 4: Build all Go files
      - name: Build All Go Files
        id: build_step
        run: |
          echo "Building all Go files in the directory..."
          go build

      # Step 5: Simulating that some testing are done 
      - name: Simulating that some testings and checks are done
        run: |
          # Getting the tag name
          echo "tag=${{github.ref_name}}">>$GITHUB_ENV
          echo "Simulating that some testings and checks are done"
          
      # Step 6: Create a ZIP archive of the built artifacts

      # - name: Create a ZIP of the built artifacts
      #   run: |
      #     echo "Creating ZIP file of the build directory..."
      #     zip -r build_artifacts.zip build/
      #     echo "ZIP file created: build_artifacts.zip"
          
      #     # Store ZIP file name in an environment variable
      #     echo "output_name=build_artifacts.zip" >> $GITHUB_ENV


      
      # Step 7: Compute the SHA256 of the ZIP file
      - name: Compute the SHA256 of the ZIP file
        run: |
          echo "Computing SHA256 checksum of the ZIP file..."
          binary_name=$(basename $(go list -m))  # Get the module name as the default binary name
          digest=$(sha256sum "$binary_name")
          
          # Print the digest to console
          echo "SHA256 checksum of $binary_name: $digest"

        
      # Step 8: Verifying GitHub Token
      - name: Verify GITHUB_TOKEN
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
              echo "Error: GITHUB_TOKEN is not set."
              exit 1
          else
              echo "GITHUB_TOKEN is available."
          fi

      # Step 9: Create a release
      - name: Create a GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.tag }}
          release_name: "Tunnel-integration ${{ env.tag }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Release generated by GitHub Actions.
            This includes the build artifacts of the service.
          draft: false
          prerelease: false

      # Step 10: Upload each built artifact to the release
      - name: Upload build artifacts to the release
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          echo "Uploading individual build artifacts..."
          
          for file in build/*; do
            if [[ -f "$file" ]]; then  # ✅ Check if it's a file (not a directory)
              echo "Uploading $file"
              asset_name=$(basename "$file")

              curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${UPLOAD_URL}?name=$asset_name"

              echo "Uploaded $file successfully!"
            else
              echo "Skipping non-file: $file"
            fi
          done
          
      # Step 11: Login to Google Cloud Registry
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with: 
          token_format: access_token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

      # Step 12: Upload each built artifact to Google Artifact Registry
      - name: Upload build artifacts to Google Artifact Registry
        id: pushing-GAR
        run: |
          echo "Uploading each built artifact to Google Artifact Registry..."
          service_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          
          # Correcting the version format by replacing "+" with "-"
          version="${{env.tag}}"
          version_fixed=$(echo "$version" | tr '+' '-')

          echo "Original version: $version"
          echo "Modified version: $version_fixed"

          for file in build/*; do
            artifact_name=$(basename "$file")
            echo "Processing artifact: $artifact_name"

            gcloud artifacts generic upload \
              --repository=nebula-storage \
              --location=europe-southwest1 \
              --project=polished-medium-445107-i9 \
              --package="$service_name" \
              --version="$version_fixed" \
              --source="$file"

            echo "Uploaded $artifact_name to Google Artifact Registry"
          done

          echo "Successfully uploaded all artifacts to Google Artifact Registry"
    


