name: 'Build, Test, and Release Updates to Google Artifact Registry'

on:
  workflow_dispatch:
  push: 
    tags: 
      - '*' # Workflow is trigered when a push is made with a tag

jobs:
  # Job 1: Check that the release version is correct
  well-tag-triggered-job:
    name: 'Check Release Version'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      TZ: Europe/Madrid  # Set the timezone to your local timezone
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Step 1: Clone the source repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Display tag information
      - name: Get Tag Details
        run: |
          echo "Tag Name: ${{ github.ref_name }}"
          echo "Full Reference: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"

          # Storing the tag name in another variable 

          echo "TAG=${{GITHUB.REF_NAME}}">> $GITHUB_ENV

      # Step 2: Install Go
      - name: Setting up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: Build all Go files
      - name: Build All Go Files
        id: build_step
        run: |
          echo "Building all Go files in the directory..."
          mkdir -p build
          find . -type f -name "*.go" | while read -r file; do
            echo "Building $file..."
            output_name=$(basename "$file" .go)
            go build -o "build/$output_name" "$file"
          done

      # Step 4: Show Build Results
      - name: List Build Output
        run: |
          echo "Build outputs:"
          ls -lh build/

      # Step 5: Simulating that some testing are done 
      - name: Simulating that some testings and checks are done
        run: |
          echo "Simulating that some testings and checks are done"
          
      # Step 6: Compute the SHA256
      - name: Compute the SHA256 of the build/
        id: compute_sha
        run: |
          echo "Computing SHA256 checksum of the build artifacts..."
          sha256sum build/* > build_checksums.txt
          cat build_checksums.txt
          
          # Save SHA256 as an output
          SHA_SUM=$(sha256sum build/* | awk '{print $1}')
          echo "SHA_SUM=$SHA_SUM" >> $GITHUB_ENV

      # Step 10: Verifying GitHub Token
      - name: Verify GITHUB_TOKEN
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
              echo "Error: GITHUB_TOKEN is not set."
              exit 1
          else
              echo "GITHUB_TOKEN is available."
          fi

      # Step 11: Create a release
      - name: Create a GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{env.TAG}}
          release_name: "Tunnel-integration ${{ env.tag }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Release generated by GitHub Actions.
            This includes the build artifacts of the service.
          draft: false
          prerelease: false

      # Step 12: Upload each build artifact to the release
      - name: Upload build artifacts to the release
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          echo "Uploading individual build artifacts..."
          for file in build/*; do
            echo "Uploading $file"
            asset_name=$(basename "$file")

            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${UPLOAD_URL}?name=$asset_name"
          done
          
      # Step 13: Login to Google Cloud Registry
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with: 
          token_format: access_token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

      # Step 14: Upload each build artifact to Google Artifact Registry
      - name: Upload build artifacts to Google Artifact Registry
        id: pushing-GAR
        run: |
          echo "Uploading each built artifact to Google Artifact Registry..."
          service_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          version=${{ env.TAG }}

          for file in build/*; do
            artifact_name=$(basename "$file")
            echo "Processing artifact: $artifact_name"

            gcloud artifacts generic upload \
              --repository=nebula-storage \
              --location=europe-southwest1 \
              --project=polished-medium-445107-i9 \
              --package="$service_name-$artifact_name" \
              --version="$version" \
              --source="$file"

            echo "Uploaded $artifact_name to Google Artifact Registry"
          done

