name: 'Build, Test, and Release'

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    name: 'Build, Test and Release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      TZ: Europe/Madrid  # Set the timezone to your local timezone
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Step 1: Clone the source repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Setting up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: Build all Go files
      - name: Build All Go Files
        id: build_step
        run: |
          echo "Building all Go files in the directory..."
          mkdir -p build
          find . -type f -name "*.go" | while read -r file; do
            echo "Building $file..."
            output_name=$(basename "$file" .go)
            go build -o "build/$output_name" "$file"
          done

      # Step 4: Show Build Results
      - name: List Build Output
        run: |
          echo "Build outputs:"
          ls -lh build/

      # Step 5: Compress Build Artifacts
      - name: Compress Build Artifacts
        run: |
          zip -r build_artifacts.zip build/

      # Step 6: Generate Unique Tag if Not Provided
      - name: Generate Unique Tag if Not Provided
        id: generate_tag
        run: |
          if [ -z "${{ github.event.inputs.tag }}" ]; then
              echo "tag=v$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          else
              echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
          echo "Generated tag: ${{ env.tag }}"

      # Step 7: Verifying GitHub Token
      - name: Verify GITHUB_TOKEN
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
              echo "Error: GITHUB_TOKEN is not set."
              exit 1
          else
              echo "GITHUB_TOKEN is available."
          fi

      # Step 8: Create a release
      - name: Create a GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.tag }}
          release_name: "Tunnel-integration ${{ env.tag }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Release generated by GitHub Actions.
            This includes the build artifacts of device-cli service.
          draft: false
          prerelease: false
          
      # Step 9: Upload the build artifacts to the release
      - name: Upload the build artifacts to the release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build_artifacts.zip
          asset_name: build_artifacts.zip
          asset_content_type: application/zip

     # Step 10: Login to Google Cloud Registry
      - name:  Authenticate with Google Cloud 
        uses: google-github-actions/auth@v2
        with: 
          token-format: access-token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

     # Step 11: Upload the artifacts to Google Artifact Registry


