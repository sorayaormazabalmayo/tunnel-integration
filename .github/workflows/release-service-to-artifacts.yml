name: 'Build, Test, and Release Updates to Google Artifact Registry'

on:
  workflow_dispatch:

jobs:
  build-and-release:
    name: 'Build, Test and Release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      TZ: Europe/Madrid  # Set the timezone to your local timezone
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # Step 1: Clone the source repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Go
      - name: Setting up Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Step 3: Build all Go files
      - name: Build All Go Files
        id: build_step
        run: |
          echo "Building all Go files in the directory..."
          mkdir -p build
          find . -type f -name "*.go" | while read -r file; do
            echo "Building $file..."
            output_name=$(basename "$file" .go)
            go build -o "build/$output_name" "$file"
          done

      # Step 4: Show Build Results
      - name: List Build Output
        run: |
          echo "Build outputs:"
          ls -lh build/

      # Step 5: Compress Build Artifacts
      - name: Compress Build Artifacts
        run: |
          service_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          zip_name ="${service_name}.zip"
          echo "zip_name=${zip_name}" >> $GITHUB_ENV
          zip -r "${{env.zip_name}}" build/
          
      
      # Step 6: Compute the SHA256 of the tunnel-integration.zip

      - name: Computing the SHA256 of the .zip
        run: |
          echo "Computing SHA256 checksum of the .zip"
          echo "digest=$(sha256sum ${zip_name}| awk '{ print $1 }')" >> $GITHUB_ENV

      # Step 6: Generate calendar versioning
      - name: Generate Calendar Versioning
        id: calendar_version
        run: |
          echo "tag=v$(date +'%Y.%m.%d')-${{ env.digest }}" >> $GITHUB_ENV
          echo "Generated tag: ${{ env.tag }}"

      # Step 7: Verifying GitHub Token
      - name: Verify GITHUB_TOKEN
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
              echo "Error: GITHUB_TOKEN is not set."
              exit 1
          else
              echo "GITHUB_TOKEN is available."
          fi

      # Step 8: Create a release
      - name: Create a GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.tag }}
          release_name: "Tunnel-integration ${{ env.tag }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Release generated by GitHub Actions.
            This includes the build artifacts of tunnel-integration service.
          draft: false
          prerelease: false

      # Step 9: Upload the build artifacts to the release
      - name: Upload the build artifacts to the release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${zip_name}
          asset_name: ${zip_name}
          asset_content_type: application/zip

      # Step 10: Login to Google Cloud Registry
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with: 
          token_format: access_token
          workload_identity_provider: projects/185640679849/locations/global/workloadIdentityPools/github/providers/github-prov
          service_account: github-actions-auth@polished-medium-445107-i9.iam.gserviceaccount.com
          access_token_lifetime: '600s'

      # Step 11: Upload the artifacts to Google Artifact Registry
      - name: Pushing the .zip to Google Artifact Registry
        id: pushing-GAR
        run: |
          echo "Uploading the released artifact from GitHub to Google Artifact Registry..."
          # Ensure `service_name` and `zip_name` are correctly set
          service_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)
          file=${{ env.zip_name }}
          
          echo "Processing artifact file: $file for service: $service_name"

          # Retrieve the version from the release tag
          version=${{ env.tag }}

          # Push the artifact to Google Artifact Registry
          gcloud artifacts packages upload "$service_name" \
            --repository=nebula-storage \
            --location=europe-southwest1 \
            --project=polished-medium-445107-i9 \
            --package="$service_name" \
            --version="$version" \
            --source="$file"

          echo "Successfully uploaded $file to Google Artifact Registry"
      

        # Step 12: Clone the target repository
      - name: Clone Target Repository
        run: |
          echo "Cloning target repository for index.json..."
          git clone https://github.com/sorayaormazabalmayo/TUF_Repository_YubiKey_Vault.git tuf-repo
          cd tuf-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          mkdir -p updates-not-released-index

      # Step 13: Generate or Update index.json
      - name: Update index.json with new versions
        run: |
          released_artifact=${zip_name}
          
          # Verify the artifact exists
          if [ ! -f "$released_artifact" ]; then
            echo "Error: Released artifact $released_artifact not found."
            exit 1
          fi

          echo "Using released artifact: $released_artifact"

          # Compute the length and sha256 of the released artifact
          length=$(stat -c%s "$released_artifact")
          sha256=$(sha256sum "$released_artifact" | awk '{print $1}')

          echo "Artifact Length: $length"
          echo "Artifact SHA256: $sha256"

          # Extract the filename from the artifact
          filename=$released_artifact
          echo "The filename is: $filename"

          # Correct the index.json file path
          basename="${filename%.zip}"
          index_name="tuf-repo/updates-not-released-index/${basename}-index.json"
          echo "Index file: $index_name"

          # Overwrite or create a new index.json file with an empty JSON object
          echo "Resetting $index_name to an empty JSON object..."
          echo '{}' > "$index_name"

          # Access the version output from the previous step
          version="${{ env.tag }}"

          # Path in which the .zip is stored in the Google Artifact Registry
          path=https://artifactregistry.googleapis.com/download/v1/projects/polished-medium-445107-i9/locations/europe-southwest1/repositories/nebula-storage/files/${service_name}:${version}:${zip_name}:download?alt=media

          echo "File: $filename, Length: $length, SHA256: $sha256, Version: $version"

          # Update the JSON index file
          jq --arg file "$basename" \
            --arg length "$length" \
            --arg sha256 "$sha256" \
            --arg version "$version" \
            '.[$file] = {length: ($length | tonumber), hashes: {sha256: $sha256}, version: $version}' "$index_name" > tmp.json && mv tmp.json "$index_name"

          echo "Updated $index_name"
          cat "$index_name"

      # Step 14: Commit and Push index.json to the Target Repository
      - name: Commit and Push index.json
        env:
          GITHUB_TOKEN: ${{ secrets.TUF_REPO_PAT }}
        run: |
          cd tuf-repo
          echo "Checking for changes..."
          git status
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing index.json..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add updates-not-released-index/*  # Add all index files
            git commit -m "Update index.json with new versions"
            git push https://x-access-token:${{ secrets.TUF_REPO_PAT }}@github.com/sorayaormazabalmayo/TUF_Repository_YubiKey_Vault.git main
          else
            echo "No changes to commit."
          fi


